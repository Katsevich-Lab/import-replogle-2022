raw_data_dir <- paste0(repl_offsite, "raw/")
raw_data_dir_rep <- paste0(raw_data_dir, c("kd8", "rd7", "kd6"))
for (dir in raw_data_dir_rep) {
if (!dir.exists(dir)) dir.create(dir, recursive = TRUE)
}
repl_offsite <- paste0(.get_config_path("LOCAL_REPLOGLE_2022_DATA_DIR"))
fs <- list.files(curr_dir)
kd6_dir <- paste0(repl_offsite, "raw/kd6/K562_essential_other/")
curr_dir <- kd6_dir
curr_dir
organize_files_for_dir(kd6_dir)
organize_files_for_dir <- function(curr_dir) {
fs <- list.files(curr_dir)
batch_no <- strsplit(x = fs, split = "_", fixed = TRUE) |> lapply(FUN = function(l) l[2]) |> unlist()
for (curr_batch_no in unique(batch_no)) {
dir <- paste0(curr_dir, "batch_", curr_batch_no)
if (!dir.exists(dir)) dir.create(dir)
}
for (i in seq_along(fs)) {
from <- paste0(curr_dir, fs[i])
to <- paste0(curr_dir, "batch_", batch_no[i], "/", fs[i])
file.rename(from = from, to = to)
}
}
organize_files_for_dir(kd6_dir)
library(tidyverse)
conflicted::conflicts_prefer(dplyr::filter)
repl_offsite <- paste0(.get_config_path("LOCAL_REPLOGLE_2022_DATA_DIR"))
repl_offsite
#############
# rd7 dataset
#############
kd6_dir <- paste0(repl_offsite, "raw/kd6/K562_essential_other")
kd6_dir
kd6_dir
feature_table <- data.table::fread(input = paste0(kd6_dir, "/batch_1/RD7_1_features.tsv.gz"),
col.names = c("grna_id", "name", "modality"))
#############
# rd7 dataset
#############
kd6_dir <- paste0(repl_offsite, "raw/kd6/K562_essential_other")
kd6_dir
feature_table <- data.table::fread(input = paste0(kd6_dir, "/batch_1/KD6_1_essential_features.tsv.gz"),
col.names = c("grna_id", "name", "modality"))
feature_table
nrow(feature_table)
feature_table
feature_table <- data.table::fread(input = paste0(kd6_dir, "/batch_1/KD6_1_essential_features.tsv.gz"),
col.names = c("grna_id", "name", "modality"))  |>
filter(modality == "CRISPR Guide Capture")
feature_table
head(feature_table)
tail(feature_table)
nrow(feature_table)
library(sceptre)
repl_offsite <- paste0(.get_config_path("LOCAL_REPLOGLE_2022_DATA_DIR"))
repl_offsite
repl_offsite
paste0(repl_offsite, "raw/rd7/")
list.files(paste0(repl_offsite, "raw/rd7/rpe1_other"))
list.files(paste0(repl_offsite, "raw/rd7/rpe1_other"), full.names = TRUE)
fs <- list.files(paste0(repl_offsite, "raw/rd7/rpe1_other"), full.names = TRUE)
fs
# cellranger output directories
directories <- list.files(paste0(repl_offsite, "raw/rd7/rpe1_other"), full.names = TRUE)
# grna target data frame
paste0(repl_offsite, "raw/rd7/grna_table.rds")
# grna target data frame
readRDS(paste0(repl_offsite, "raw/rd7/grna_table.rds"))
# grna target data frame
grna_target_data_frame <- readRDS(paste0(repl_offsite, "raw/rd7/grna_table.rds"))
grna_target_data_frame
head(grna_target_data_frame)
repl_offsite
# directory to write
directory_to_write <- paste0(repl_offsite, "processed/rd7")
directory_to_write
# directory to write
directory_to_write <- paste0(repl_offsite, "processed/rd7")
directory_to_write
directories
sceptre_object <- import_data_from_cellranger(directories = directories,
moi = "low",
grna_target_data_frame = grna_target_data_frame,
use_ondisc = TRUE,
directory_to_write = directory_to_write)
sceptre_object
r <- get_response_matrix(sceptre_object)
r
r[1,]
r[10,]
r[50,] |>hist()
r[50,] |> table()
directory_to_write
sceptre_object
write_ondisc_backed_sceptre_object(sceptre_object, directory_to_write)
sceptre_object
sceptre_object |> pryr::object_size()
library(sceptre)
repl_offsite <- paste0(.get_config_path("LOCAL_REPLOGLE_2022_DATA_DIR"))
# cellranger output directories
directories <- list.files(paste0(repl_offsite, "raw/rd7/rpe1_other"), full.names = TRUE)
# grna target data frame
grna_target_data_frame <- readRDS(paste0(repl_offsite, "raw/rd7/grna_table.rds"))
# directory to write
directory_to_write <- paste0(repl_offsite, "processed/rd7")
directory_to_write
directories
grna_target_data_frame
head(grna_target_data_frame)
directory_to_write
cd
# import data into sceptre_object; write sceptre_object without setting analysis params
sceptre_object <- import_data_from_cellranger(directories = directories,
moi = "low",
grna_target_data_frame = grna_target_data_frame,
use_ondisc = TRUE,
directory_to_write = directory_to_write)
grna_target_data_frame
head(grna_target_data_frame)
directories
"low"
grna_target_data_frame
# cellranger output directories
directories <- list.files(paste0(repl_offsite, "raw/rd7/rpe1_other"), full.names = TRUE)[1:3]
# grna target data frame
grna_target_data_frame <- readRDS(paste0(repl_offsite, "raw/rd7/grna_table.rds"))
# directory to write
directory_to_write <- paste0(repl_offsite, "processed/rd7")
# import data into sceptre_object; write sceptre_object without setting analysis params
sceptre_object <- import_data_from_cellranger(directories = directories,
moi = "low",
grna_target_data_frame = grna_target_data_frame,
use_ondisc = TRUE,
directory_to_write = directory_to_write)
load_all("~/research_code/sceptre")
directories
moi
moi <- "low"
grna_target_data_frame
extra_covariates
extra_covariates = data.frame()
use_ondisc = FALSE; directory_to_write = NULL
# import data into sceptre_object; write sceptre_object without setting analysis params
sceptre_object <- import_data_from_cellranger(directories = directories,
moi = "low",
grna_target_data_frame = grna_target_data_frame,
use_ondisc = TRUE,
directory_to_write = directory_to_write)
# directory to write
directory_to_write <- paste0(repl_offsite, "processed/rd7")
# import data into sceptre_object; write sceptre_object without setting analysis params
sceptre_object <- import_data_from_cellranger(directories = directories,
moi = "low",
grna_target_data_frame = grna_target_data_frame,
use_ondisc = TRUE,
directory_to_write = directory_to_write)
directories
moi
grna_target_data_frame
extra_covariates
directory_to_write
# 0. check that directory_to_write has been supplied
if (is.null(directory_to_write)) stop("`directory_to_write` must be supplied.")
# 1. call the corresponding ondisc function
vector_supplied <- "vector_id" %in% colnames(grna_target_data_frame)
out <- ondisc::create_odm_from_cellranger(directories_to_load = directories,
directory_to_write = directory_to_write,
write_cellwise_covariates = FALSE,
grna_target_data_frame = if (vector_supplied) grna_target_data_frame else NULL)
grna_target_data_frame <- collapse_grna_target_data_frame(grna_target_data_frame)
head(grna_target_data_frame)
# 2. check data imports
check_import_data_inputs(out$gene, out$grna, grna_target_data_frame, moi, extra_covariates) |> invisible()
# 3. process the cellwise covariates
covariate_df <- out$cellwise_covariates
colnames(covariate_df) <- gsub(pattern = "gene", replacement = "response", fixed = TRUE, x = colnames(covariate_df))
if (nrow(extra_covariates) >= 1L) covariate_df <- cbind(extra_covariates, covariate_df)
# 4. initialize the sceptre_object
sceptre_object <- init_sceptre_object(response_matrix = out$gene,
grna_matrix = out$grna,
covariate_data_frame = covariate_df,
moi = moi,
grna_target_data_frame = grna_target_data_frame)
# 5. add integer id
sceptre_object@integer_id <- out$gene@integer_id
sceptre_object
sceptre_object |> print()
install()
library(tidyverse)
conflicted::conflicts_prefer(dplyr::filter)
repl_offsite <- paste0(.get_config_path("LOCAL_REPLOGLE_2022_DATA_DIR"))
make_grna_target_df <- function(xl_fp, features_fp) {
vector_info_table <- readxl::read_xlsx(path = paste0(repl_offsite, xl_fp), sheet = 3,
col_names = c("vector_id", "gene_name", "transcript", "grna_target", "grna_a", "target_sequence_a",
"grna_b", "target_sequence_b", "duplicated", "either_duplicated"), skip = 1) |>
select(vector_id, grna_target, grna_a, grna_b)
vector_info_table$grna_a <- paste0(vector_info_table$grna_a, "_posA")
vector_info_table$grna_b <- paste0(vector_info_table$grna_b, "_posB")
feature_table <- data.table::fread(input = paste0(repl_offsite, features_fp),
col.names = c("grna_id", "name", "modality"))
grna_table <- feature_table |> filter(modality == "CRISPR Guide Capture") |> dplyr::select(grna_id)
# reshape vector_info_table
vector_info_table_reshape <- vector_info_table |>
pivot_longer(cols = c("grna_a", "grna_b"), values_to = "grna_id", names_to = NULL)
grna_table_updated <- left_join(x = grna_table, y = vector_info_table_reshape, by = "grna_id") |>
dplyr::arrange(grna_id)
na_grnas <- is.na(grna_table_updated$grna_target) | is.na(grna_table_updated$vector_id)
grna_table_updated$grna_target[na_grnas] <- "unknown"
grna_table_updated$vector_id[na_grnas] <- "unknown"
x <- grna_table_updated |>
filter(grna_target != "unknown") |>
mutate(non_targeting = (grna_target == "non-targeting")) |>
group_by(non_targeting) |>
mutate(vector_id_2 = factor(vector_id,
levels = unique(vector_id),
labels = paste0(ifelse(non_targeting[1], "non-targeting_", "targeting_"),
"vector_", seq_along(unique(vector_id)))) |> as.character()) |>
arrange(vector_id_2) |>
ungroup() |>
mutate(non_targeting = NULL, vector_id = NULL) |>
rename("vector_id" = "vector_id_2")
grna_table_final <- rbind(x, grna_table_updated |> filter(grna_target == "unknown"))
return(grna_table_final)
}
#############
# rd7 dataset
#############
xl_fp <- "raw/mmc1.xlsx"
features_fp <- "raw/rd7/rpe1_other/batch_1/RD7_1_features.tsv.gz"
grna_table_final_rd7 <- make_grna_target_df(xl_fp, features_fp)
grna_table_final_rd7
head(grna_table_final_rd7)
xl_fp
features_fp
vector_info_table <- readxl::read_xlsx(path = paste0(repl_offsite, xl_fp), sheet = 3,
col_names = c("vector_id", "gene_name", "transcript", "grna_target", "grna_a", "target_sequence_a",
"grna_b", "target_sequence_b", "duplicated", "either_duplicated"), skip = 1) |>
select(vector_id, grna_target, grna_a, grna_b)
vector_info_table
head(vector_info_table)
vector_info_table$grna_a <- paste0(vector_info_table$grna_a, "_posA")
vector_info_table$grna_b <- paste0(vector_info_table$grna_b, "_posB")
feature_table <- data.table::fread(input = paste0(repl_offsite, features_fp),
col.names = c("grna_id", "name", "modality"))
feature_table
grna_table <- feature_table |> filter(modality == "CRISPR Guide Capture") |> dplyr::select(grna_id)
grna_table
# reshape vector_info_table
vector_info_table_reshape <- vector_info_table |>
pivot_longer(cols = c("grna_a", "grna_b"), values_to = "grna_id", names_to = NULL)
vector_info_table_reshape
grna_table_updated <- left_join(x = grna_table, y = vector_info_table_reshape, by = "grna_id") |>
dplyr::arrange(grna_id)
grna_table_updated
na_grnas <- is.na(grna_table_updated$grna_target) | is.na(grna_table_updated$vector_id)
na_grnas
mean(na_grnas)
grna_table_updated$grna_target[na_grnas] <- "unknown"
grna_table_updated$vector_id[na_grnas] <- "unknown"
grna_table_updated
x <- grna_table_updated |>
filter(grna_target != "unknown") |>
mutate(non_targeting = (grna_target == "non-targeting")) |>
group_by(non_targeting) |>
mutate(vector_id_2 = factor(vector_id,
levels = unique(vector_id),
labels = paste0(ifelse(non_targeting[1], "non-targeting_", "targeting_"),
"vector_", seq_along(unique(vector_id)))) |> as.character())
x
grna_table_updated |>
filter(grna_target != "unknown")
grna_table_updated
grna_table_updated |> dplyr::filter(grna_target == "non-targeting")
grna_table_updated |> dplyr::filter(grna_target == "non-targeting") |> dplyr::arrange(vector_id)
grna_table_updated |>
filter(grna_target != "unknown") |>
mutate(non_targeting = (grna_target == "non-targeting"))
grna_table_updated |>
filter(grna_target != "unknown") |>
mutate(non_targeting = (grna_target == "non-targeting")) |>
group_by(non_targeting)
grna_table_updated |>
filter(grna_target != "unknown") |>
mutate(non_targeting = (grna_target == "non-targeting")) |>
group_by(non_targeting) |>
mutate(vector_id_2 = factor(vector_id,
levels = unique(vector_id),
labels = paste0(ifelse(non_targeting[1], "non-targeting_", "targeting_"),
"vector_", seq_along(unique(vector_id)))) |> as.character())
head(grna_table_updated)
grna_table_updated
grna_table_updated |> dplyr::filter(grna_target == "unkonwn")
grna_table_updated |> dplyr::filter(grna_target == "unknown")
grna_table_updated
library(tidyverse)
conflicted::conflicts_prefer(dplyr::filter)
repl_offsite <- paste0(.get_config_path("LOCAL_REPLOGLE_2022_DATA_DIR"))
make_grna_target_df <- function(xl_fp, features_fp) {
vector_info_table <- readxl::read_xlsx(path = paste0(repl_offsite, xl_fp), sheet = 3,
col_names = c("vector_id", "gene_name", "transcript", "grna_target", "grna_a", "target_sequence_a",
"grna_b", "target_sequence_b", "duplicated", "either_duplicated"), skip = 1) |>
select(vector_id, grna_target, grna_a, grna_b)
vector_info_table$grna_a <- paste0(vector_info_table$grna_a, "_posA")
vector_info_table$grna_b <- paste0(vector_info_table$grna_b, "_posB")
feature_table <- data.table::fread(input = paste0(repl_offsite, features_fp),
col.names = c("grna_id", "name", "modality"))
grna_table <- feature_table |> filter(modality == "CRISPR Guide Capture") |> dplyr::select(grna_id)
# reshape vector_info_table
vector_info_table_reshape <- vector_info_table |>
pivot_longer(cols = c("grna_a", "grna_b"), values_to = "grna_id", names_to = NULL)
grna_table_updated <- left_join(x = grna_table, y = vector_info_table_reshape, by = "grna_id") |>
dplyr::arrange(grna_id)
na_grnas <- is.na(grna_table_updated$grna_target) | is.na(grna_table_updated$vector_id)
grna_table_updated$grna_target[na_grnas] <- "unknown"
grna_table_updated$vector_id[na_grnas] <- "unknown"
return(grna_table_updated)
}
#############
# rd7 dataset
#############
xl_fp <- "raw/mmc1.xlsx"
features_fp <- "raw/rd7/rpe1_other/batch_1/RD7_1_features.tsv.gz"
grna_table_final_rd7 <- make_grna_target_df(xl_fp, features_fp)
grna_table_final_rd7
xl_fp <- "raw/mmc1.xlsx"
features_fp <- "raw/rd7/rpe1_other/batch_1/RD7_1_features.tsv.gz"
grna_table_final_rd7 <- make_grna_target_df(xl_fp, features_fp)
# save result
saveRDS(object = grna_table_final_rd7,
file = paste0(repl_offsite, "raw/rd7/grna_table.rds"))
xl_fp <- "raw/mmc1.xlsx"
features_fp <- "raw/kd6/K562_essential_other/batch_1/KD6_1_essential_features.tsv.gz"
grna_table_final_kd6 <- make_grna_target_df(xl_fp, features_fp)
saveRDS(object = grna_table_final_kd6,
file = paste0(repl_offsite, "raw/kd6/grna_table.rds"))
library(tidyverse)
conflicted::conflicts_prefer(dplyr::filter)
repl_offsite <- paste0(.get_config_path("LOCAL_REPLOGLE_2022_DATA_DIR"))
source("~/.Rprofile")
library(tidyverse)
conflicted::conflicts_prefer(dplyr::filter)
repl_offsite <- paste0(.get_config_path("LOCAL_REPLOGLE_2022_DATA_DIR"))
make_grna_target_df <- function(xl_fp, features_fp) {
vector_info_table <- readxl::read_xlsx(path = paste0(repl_offsite, xl_fp), sheet = 3,
col_names = c("vector_id", "gene_name", "transcript", "grna_target", "grna_a", "target_sequence_a",
"grna_b", "target_sequence_b", "duplicated", "either_duplicated"), skip = 1) |>
select(vector_id, grna_target, grna_a, grna_b)
vector_info_table$grna_a <- paste0(vector_info_table$grna_a, "_posA")
vector_info_table$grna_b <- paste0(vector_info_table$grna_b, "_posB")
feature_table <- data.table::fread(input = paste0(repl_offsite, features_fp),
col.names = c("grna_id", "name", "modality"))
grna_table <- feature_table |> filter(modality == "CRISPR Guide Capture") |> dplyr::select(grna_id)
# reshape vector_info_table
vector_info_table_reshape <- vector_info_table |>
pivot_longer(cols = c("grna_a", "grna_b"), values_to = "grna_id", names_to = NULL)
grna_table_updated <- left_join(x = grna_table, y = vector_info_table_reshape, by = "grna_id") |>
dplyr::arrange(grna_id)
na_grnas <- is.na(grna_table_updated$grna_target) | is.na(grna_table_updated$vector_id)
grna_table_updated$grna_target[na_grnas] <- "unknown"
grna_table_updated$vector_id[na_grnas] <- "unknown"
return(grna_table_updated)
}
repl_offsite
paste0(repl_offsite, "/velten/")
velten_rd7_object <- readRDS(paste0(repl_offsite, "processed/velten/"))
paste0(repl_offsite, "processed/velten/")
velten_rd7_object <- readRDS(paste0(repl_offsite, "processed/velten/sceptre_object_RPE1.rds"))
library(sceptre)
velten_rd7_object@grna_target_data_frame
vector_id <- velten_rd7_object@grna_target_data_frame$grna_id
vector_id
velten_rd7_object@grna_target_data_frame
velten_rd7_object@grna_target_data_frame |>
dplyr::filter(grna_target == "non-targeting")
nt_vectors_to_keep <- velten_rd7_object@grna_target_data_frame |>
dplyr::filter(grna_target == "non-targeting") |>
dplyr::pull(grna_id)
nt_vectors_to_keep
nt_vectors_to_keep
vector_info_table <- readxl::read_xlsx(path = paste0(repl_offsite, xl_fp), sheet = 3,
col_names = c("vector_id", "gene_name", "transcript", "grna_target", "grna_a", "target_sequence_a",
"grna_b", "target_sequence_b", "duplicated", "either_duplicated"), skip = 1) |>
select(vector_id, grna_target, grna_a, grna_b)
xl_fp <- "raw/mmc1.xlsx"
features_fp <- "raw/rd7/rpe1_other/batch_1/RD7_1_features.tsv.gz"
velten_rd7_object <- readRDS(paste0(repl_offsite, "processed/velten/sceptre_object_RPE1.rds"))
nt_vectors_to_keep <- velten_rd7_object@grna_target_data_frame |>
dplyr::filter(grna_target == "non-targeting") |>
dplyr::pull(grna_id)
vector_info_table <- readxl::read_xlsx(path = paste0(repl_offsite, xl_fp), sheet = 3,
col_names = c("vector_id", "gene_name", "transcript", "grna_target", "grna_a", "target_sequence_a",
"grna_b", "target_sequence_b", "duplicated", "either_duplicated"), skip = 1) |>
select(vector_id, grna_target, grna_a, grna_b)
vector_info_table
vector_info_table$grna_a <- paste0(vector_info_table$grna_a, "_posA")
vector_info_table$grna_b <- paste0(vector_info_table$grna_b, "_posB")
feature_table <- data.table::fread(input = paste0(repl_offsite, features_fp),
col.names = c("grna_id", "name", "modality"))
grna_table <- feature_table |> filter(modality == "CRISPR Guide Capture") |> dplyr::select(grna_id)
# reshape vector_info_table
vector_info_table_reshape <- vector_info_table |>
pivot_longer(cols = c("grna_a", "grna_b"), values_to = "grna_id", names_to = NULL)
grna_table_updated <- left_join(x = grna_table, y = vector_info_table_reshape, by = "grna_id") |>
dplyr::arrange(grna_id)
na_grnas <- is.na(grna_table_updated$grna_target) | is.na(grna_table_updated$vector_id)
grna_table_updated$grna_target[na_grnas] <- "unknown"
grna_table_updated$vector_id[na_grnas] <- "unknown"
grna_table_updated
grna_table_updated
grna_table_updated |> dplyr::mutate(grna_target = "non-targeting")
grna_table_updated |> dplyr::mutate(is_nt = (grna_target = "non-targeting"))
grna_table_updated |> dplyr::mutate(is_nt = (grna_target == "non-targeting"))
grna_table_updated |>
dplyr::mutate(is_nt = (grna_target == "non-targeting"),
grna_target = ifelse(!is_nt | (vector_id %in% nt_vectors_to_keep), grna_target, "nt_off_target"))
grna_table_updated |>
dplyr::mutate(is_nt = (grna_target == "non-targeting"),
grna_target = ifelse(!is_nt | (vector_id %in% nt_vectors_to_keep), grna_target, "nt_off_target"),
is_nt = NULL)
x <- grna_table_updated |>
dplyr::mutate(is_nt = (grna_target == "non-targeting"),
grna_target = ifelse(!is_nt | (vector_id %in% nt_vectors_to_keep), grna_target, "nt_off_target"),
is_nt = NULL)
x
x |> print(n = 100)
class(x)
View(x)
x$grna_target == "nt_off_target"
sum(x$grna_target == "nt_off_target")
x
x |> dplyr::arrange(grna_target, vector_id, grna_id)
View(x |> dplyr::arrange(grna_target, vector_id, grna_id))
library(tidyverse)
library(sceptre)
conflicted::conflicts_prefer(dplyr::filter)
repl_offsite <- paste0(.get_config_path("LOCAL_REPLOGLE_2022_DATA_DIR"))
make_grna_target_df <- function(xl_fp, features_fp, nt_vectors_to_keep) {
vector_info_table <- readxl::read_xlsx(path = paste0(repl_offsite, xl_fp), sheet = 3,
col_names = c("vector_id", "gene_name", "transcript", "grna_target", "grna_a", "target_sequence_a",
"grna_b", "target_sequence_b", "duplicated", "either_duplicated"), skip = 1) |>
select(vector_id, grna_target, grna_a, grna_b)
vector_info_table$grna_a <- paste0(vector_info_table$grna_a, "_posA")
vector_info_table$grna_b <- paste0(vector_info_table$grna_b, "_posB")
feature_table <- data.table::fread(input = paste0(repl_offsite, features_fp),
col.names = c("grna_id", "name", "modality"))
grna_table <- feature_table |> filter(modality == "CRISPR Guide Capture") |> dplyr::select(grna_id)
# reshape vector_info_table
vector_info_table_reshape <- vector_info_table |>
pivot_longer(cols = c("grna_a", "grna_b"), values_to = "grna_id", names_to = NULL)
grna_table_updated <- left_join(x = grna_table, y = vector_info_table_reshape, by = "grna_id") |>
dplyr::arrange(grna_id)
na_grnas <- is.na(grna_table_updated$grna_target) | is.na(grna_table_updated$vector_id)
grna_table_updated$grna_target[na_grnas] <- "unknown"
grna_table_updated$vector_id[na_grnas] <- "unknown"
grna_table_updated <- grna_table_updated |>
dplyr::mutate(is_nt = (grna_target == "non-targeting"),
grna_target = ifelse(!is_nt | (vector_id %in% nt_vectors_to_keep), grna_target, "nt_off_target"),
is_nt = NULL)
return(grna_table_updated)
}
return_nt_vectors_in_use_by_velten(sceptre_object_fp) {
library(tidyverse)
library(sceptre)
conflicted::conflicts_prefer(dplyr::filter)
repl_offsite <- paste0(.get_config_path("LOCAL_REPLOGLE_2022_DATA_DIR"))
make_grna_target_df <- function(xl_fp, features_fp, nt_vectors_to_keep) {
vector_info_table <- readxl::read_xlsx(path = paste0(repl_offsite, xl_fp), sheet = 3,
col_names = c("vector_id", "gene_name", "transcript", "grna_target", "grna_a", "target_sequence_a",
"grna_b", "target_sequence_b", "duplicated", "either_duplicated"), skip = 1) |>
select(vector_id, grna_target, grna_a, grna_b)
vector_info_table$grna_a <- paste0(vector_info_table$grna_a, "_posA")
vector_info_table$grna_b <- paste0(vector_info_table$grna_b, "_posB")
feature_table <- data.table::fread(input = paste0(repl_offsite, features_fp),
col.names = c("grna_id", "name", "modality"))
grna_table <- feature_table |> filter(modality == "CRISPR Guide Capture") |> dplyr::select(grna_id)
# reshape vector_info_table
vector_info_table_reshape <- vector_info_table |>
pivot_longer(cols = c("grna_a", "grna_b"), values_to = "grna_id", names_to = NULL)
grna_table_updated <- left_join(x = grna_table, y = vector_info_table_reshape, by = "grna_id") |>
dplyr::arrange(grna_id)
na_grnas <- is.na(grna_table_updated$grna_target) | is.na(grna_table_updated$vector_id)
grna_table_updated$grna_target[na_grnas] <- "unknown"
grna_table_updated$vector_id[na_grnas] <- "unknown"
grna_table_updated <- grna_table_updated |>
dplyr::mutate(is_nt = (grna_target == "non-targeting"),
grna_target = ifelse(!is_nt | (vector_id %in% nt_vectors_to_keep), grna_target, "nt_off_target"),
is_nt = NULL)
return(grna_table_updated)
}
return_nt_vectors_in_use_by_velten <- function(sceptre_object_fp) {
readRDS(sceptre_object_fp)@grna_target_data_frame |>
dplyr::filter(grna_target == "non-targeting") |>
dplyr::pull(grna_id)
}
xl_fp <- "raw/mmc1.xlsx"
features_fp <- "raw/rd7/rpe1_other/batch_1/RD7_1_features.tsv.gz"
nt_vectors_to_keep <- return_nt_vectors_in_use_by_velten(paste0(repl_offsite, "processed/velten/sceptre_object_RPE1.rds"))
grna_table_final_rd7 <- make_grna_target_df(xl_fp, features_fp, nt_vectors_to_keep)
# save result
saveRDS(object = grna_table_final_rd7,
file = paste0(repl_offsite, "raw/rd7/grna_table.rds"))
#############
# kd6 dataset
#############
xl_fp <- "raw/mmc1.xlsx"
features_fp <- "raw/kd6/K562_essential_other/batch_1/KD6_1_essential_features.tsv.gz"
nt_vectors_to_keep <- return_nt_vectors_in_use_by_velten(paste0(repl_offsite, "processed/velten/sceptre_object_K562.rds"))
nt_vectors_to_keep
grna_table_final_kd6 <- make_grna_target_df(xl_fp, features_fp, nt_vectors_to_keep)
saveRDS(object = grna_table_final_kd6,
file = paste0(repl_offsite, "raw/kd6/grna_table.rds"))
